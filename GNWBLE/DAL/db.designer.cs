#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="db_gnwble")]
	public partial class dbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertdepartment(department instance);
    partial void Updatedepartment(department instance);
    partial void Deletedepartment(department instance);
    partial void Insertregion(region instance);
    partial void Updateregion(region instance);
    partial void Deleteregion(region instance);
    partial void Insertrole(role instance);
    partial void Updaterole(role instance);
    partial void Deleterole(role instance);
    partial void Insertcompany(company instance);
    partial void Updatecompany(company instance);
    partial void Deletecompany(company instance);
    partial void Insertassigned_course(assigned_course instance);
    partial void Updateassigned_course(assigned_course instance);
    partial void Deleteassigned_course(assigned_course instance);
    partial void Inserttest_result(test_result instance);
    partial void Updatetest_result(test_result instance);
    partial void Deletetest_result(test_result instance);
    partial void Insertcourse_type(course_type instance);
    partial void Updatecourse_type(course_type instance);
    partial void Deletecourse_type(course_type instance);
    partial void Insertcompletion_status(completion_status instance);
    partial void Updatecompletion_status(completion_status instance);
    partial void Deletecompletion_status(completion_status instance);
    partial void Insertlesson(lesson instance);
    partial void Updatelesson(lesson instance);
    partial void Deletelesson(lesson instance);
    partial void Insertstaff_assigned_course(staff_assigned_course instance);
    partial void Updatestaff_assigned_course(staff_assigned_course instance);
    partial void Deletestaff_assigned_course(staff_assigned_course instance);
    partial void Insertstaff(staff instance);
    partial void Updatestaff(staff instance);
    partial void Deletestaff(staff instance);
    partial void Insertmodule(module instance);
    partial void Updatemodule(module instance);
    partial void Deletemodule(module instance);
    partial void Insertcourse(course instance);
    partial void Updatecourse(course instance);
    partial void Deletecourse(course instance);
    partial void Inserttest_matrix(test_matrix instance);
    partial void Updatetest_matrix(test_matrix instance);
    partial void Deletetest_matrix(test_matrix instance);
    partial void Inserttest(test instance);
    partial void Updatetest(test instance);
    partial void Deletetest(test instance);
    partial void Insertperformance_graph(performance_graph instance);
    partial void Updateperformance_graph(performance_graph instance);
    partial void Deleteperformance_graph(performance_graph instance);
    #endregion
		
		public dbDataContext() : 
				base(global::DAL.Properties.Settings.Default.db_gnwbleConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<department> departments
		{
			get
			{
				return this.GetTable<department>();
			}
		}
		
		public System.Data.Linq.Table<region> regions
		{
			get
			{
				return this.GetTable<region>();
			}
		}
		
		public System.Data.Linq.Table<role> roles
		{
			get
			{
				return this.GetTable<role>();
			}
		}
		
		public System.Data.Linq.Table<company> companies
		{
			get
			{
				return this.GetTable<company>();
			}
		}
		
		public System.Data.Linq.Table<assigned_course> assigned_courses
		{
			get
			{
				return this.GetTable<assigned_course>();
			}
		}
		
		public System.Data.Linq.Table<test_result> test_results
		{
			get
			{
				return this.GetTable<test_result>();
			}
		}
		
		public System.Data.Linq.Table<course_type> course_types
		{
			get
			{
				return this.GetTable<course_type>();
			}
		}
		
		public System.Data.Linq.Table<completion_status> completion_status
		{
			get
			{
				return this.GetTable<completion_status>();
			}
		}
		
		public System.Data.Linq.Table<lesson> lessons
		{
			get
			{
				return this.GetTable<lesson>();
			}
		}
		
		public System.Data.Linq.Table<staff_assigned_course> staff_assigned_courses
		{
			get
			{
				return this.GetTable<staff_assigned_course>();
			}
		}
		
		public System.Data.Linq.Table<staff> staffs
		{
			get
			{
				return this.GetTable<staff>();
			}
		}
		
		public System.Data.Linq.Table<module> modules
		{
			get
			{
				return this.GetTable<module>();
			}
		}
		
		public System.Data.Linq.Table<course> courses
		{
			get
			{
				return this.GetTable<course>();
			}
		}
		
		public System.Data.Linq.Table<test_matrix> test_matrixes
		{
			get
			{
				return this.GetTable<test_matrix>();
			}
		}
		
		public System.Data.Linq.Table<test> tests
		{
			get
			{
				return this.GetTable<test>();
			}
		}
		
		public System.Data.Linq.Table<performance_graph> performance_graphs
		{
			get
			{
				return this.GetTable<performance_graph>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.department")]
	public partial class department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private System.Nullable<int> _company_id;
		
		private EntitySet<staff> _staffs;
		
		private EntityRef<company> _company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Oncompany_idChanging(System.Nullable<int> value);
    partial void Oncompany_idChanged();
    #endregion
		
		public department()
		{
			this._staffs = new EntitySet<staff>(new Action<staff>(this.attach_staffs), new Action<staff>(this.detach_staffs));
			this._company = default(EntityRef<company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_company_id", DbType="Int")]
		public System.Nullable<int> company_id
		{
			get
			{
				return this._company_id;
			}
			set
			{
				if ((this._company_id != value))
				{
					if (this._company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncompany_idChanging(value);
					this.SendPropertyChanging();
					this._company_id = value;
					this.SendPropertyChanged("company_id");
					this.Oncompany_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="department_staff", Storage="_staffs", ThisKey="id", OtherKey="department_id")]
		public EntitySet<staff> staffs
		{
			get
			{
				return this._staffs;
			}
			set
			{
				this._staffs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="company_department", Storage="_company", ThisKey="company_id", OtherKey="id", IsForeignKey=true)]
		public company company
		{
			get
			{
				return this._company.Entity;
			}
			set
			{
				company previousValue = this._company.Entity;
				if (((previousValue != value) 
							|| (this._company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._company.Entity = null;
						previousValue.departments.Remove(this);
					}
					this._company.Entity = value;
					if ((value != null))
					{
						value.departments.Add(this);
						this._company_id = value.id;
					}
					else
					{
						this._company_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_staffs(staff entity)
		{
			this.SendPropertyChanging();
			entity.department = this;
		}
		
		private void detach_staffs(staff entity)
		{
			this.SendPropertyChanging();
			entity.department = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.region")]
	public partial class region : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<company> _companies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public region()
		{
			this._companies = new EntitySet<company>(new Action<company>(this.attach_companies), new Action<company>(this.detach_companies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="region_company", Storage="_companies", ThisKey="id", OtherKey="region_id")]
		public EntitySet<company> companies
		{
			get
			{
				return this._companies;
			}
			set
			{
				this._companies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_companies(company entity)
		{
			this.SendPropertyChanging();
			entity.region = this;
		}
		
		private void detach_companies(company entity)
		{
			this.SendPropertyChanging();
			entity.region = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.role")]
	public partial class role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<staff> _staffs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public role()
		{
			this._staffs = new EntitySet<staff>(new Action<staff>(this.attach_staffs), new Action<staff>(this.detach_staffs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="role_staff", Storage="_staffs", ThisKey="id", OtherKey="role_id")]
		public EntitySet<staff> staffs
		{
			get
			{
				return this._staffs;
			}
			set
			{
				this._staffs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_staffs(staff entity)
		{
			this.SendPropertyChanging();
			entity.role = this;
		}
		
		private void detach_staffs(staff entity)
		{
			this.SendPropertyChanging();
			entity.role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.company")]
	public partial class company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private System.Nullable<int> _region_id;
		
		private EntitySet<department> _departments;
		
		private EntityRef<region> _region;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onregion_idChanging(System.Nullable<int> value);
    partial void Onregion_idChanged();
    #endregion
		
		public company()
		{
			this._departments = new EntitySet<department>(new Action<department>(this.attach_departments), new Action<department>(this.detach_departments));
			this._region = default(EntityRef<region>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_region_id", DbType="Int")]
		public System.Nullable<int> region_id
		{
			get
			{
				return this._region_id;
			}
			set
			{
				if ((this._region_id != value))
				{
					if (this._region.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onregion_idChanging(value);
					this.SendPropertyChanging();
					this._region_id = value;
					this.SendPropertyChanged("region_id");
					this.Onregion_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="company_department", Storage="_departments", ThisKey="id", OtherKey="company_id")]
		public EntitySet<department> departments
		{
			get
			{
				return this._departments;
			}
			set
			{
				this._departments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="region_company", Storage="_region", ThisKey="region_id", OtherKey="id", IsForeignKey=true)]
		public region region
		{
			get
			{
				return this._region.Entity;
			}
			set
			{
				region previousValue = this._region.Entity;
				if (((previousValue != value) 
							|| (this._region.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._region.Entity = null;
						previousValue.companies.Remove(this);
					}
					this._region.Entity = value;
					if ((value != null))
					{
						value.companies.Add(this);
						this._region_id = value.id;
					}
					else
					{
						this._region_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("region");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_departments(department entity)
		{
			this.SendPropertyChanging();
			entity.company = this;
		}
		
		private void detach_departments(department entity)
		{
			this.SendPropertyChanging();
			entity.company = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.assigned_course")]
	public partial class assigned_course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<System.DateTime> _start_date;
		
		private System.Nullable<System.DateTime> _end_date;
		
		private System.Nullable<int> _course_id;
		
		private EntitySet<staff_assigned_course> _staff_assigned_courses;
		
		private EntityRef<course> _course;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onstart_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onstart_dateChanged();
    partial void Onend_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onend_dateChanged();
    partial void Oncourse_idChanging(System.Nullable<int> value);
    partial void Oncourse_idChanged();
    #endregion
		
		public assigned_course()
		{
			this._staff_assigned_courses = new EntitySet<staff_assigned_course>(new Action<staff_assigned_course>(this.attach_staff_assigned_courses), new Action<staff_assigned_course>(this.detach_staff_assigned_courses));
			this._course = default(EntityRef<course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_start_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> start_date
		{
			get
			{
				return this._start_date;
			}
			set
			{
				if ((this._start_date != value))
				{
					this.Onstart_dateChanging(value);
					this.SendPropertyChanging();
					this._start_date = value;
					this.SendPropertyChanged("start_date");
					this.Onstart_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_end_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> end_date
		{
			get
			{
				return this._end_date;
			}
			set
			{
				if ((this._end_date != value))
				{
					this.Onend_dateChanging(value);
					this.SendPropertyChanging();
					this._end_date = value;
					this.SendPropertyChanged("end_date");
					this.Onend_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_course_id", DbType="Int")]
		public System.Nullable<int> course_id
		{
			get
			{
				return this._course_id;
			}
			set
			{
				if ((this._course_id != value))
				{
					if (this._course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncourse_idChanging(value);
					this.SendPropertyChanging();
					this._course_id = value;
					this.SendPropertyChanged("course_id");
					this.Oncourse_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="assigned_course_staff_assigned_course", Storage="_staff_assigned_courses", ThisKey="id", OtherKey="assigned_course_id")]
		public EntitySet<staff_assigned_course> staff_assigned_courses
		{
			get
			{
				return this._staff_assigned_courses;
			}
			set
			{
				this._staff_assigned_courses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="course_assigned_course", Storage="_course", ThisKey="course_id", OtherKey="id", IsForeignKey=true)]
		public course course
		{
			get
			{
				return this._course.Entity;
			}
			set
			{
				course previousValue = this._course.Entity;
				if (((previousValue != value) 
							|| (this._course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._course.Entity = null;
						previousValue.assigned_courses.Remove(this);
					}
					this._course.Entity = value;
					if ((value != null))
					{
						value.assigned_courses.Add(this);
						this._course_id = value.id;
					}
					else
					{
						this._course_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("course");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_staff_assigned_courses(staff_assigned_course entity)
		{
			this.SendPropertyChanging();
			entity.assigned_course = this;
		}
		
		private void detach_staff_assigned_courses(staff_assigned_course entity)
		{
			this.SendPropertyChanging();
			entity.assigned_course = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.test_result")]
	public partial class test_result : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _staff_id;
		
		private System.Nullable<int> _test_id;
		
		private System.Nullable<System.DateTime> _start_time;
		
		private System.Nullable<System.DateTime> _end_time;
		
		private System.Nullable<double> _result;
		
		private string _answers;
		
		private EntityRef<staff> _staff;
		
		private EntityRef<test> _test;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onstaff_idChanging(System.Nullable<int> value);
    partial void Onstaff_idChanged();
    partial void Ontest_idChanging(System.Nullable<int> value);
    partial void Ontest_idChanged();
    partial void Onstart_timeChanging(System.Nullable<System.DateTime> value);
    partial void Onstart_timeChanged();
    partial void Onend_timeChanging(System.Nullable<System.DateTime> value);
    partial void Onend_timeChanged();
    partial void OnresultChanging(System.Nullable<double> value);
    partial void OnresultChanged();
    partial void OnanswersChanging(string value);
    partial void OnanswersChanged();
    #endregion
		
		public test_result()
		{
			this._staff = default(EntityRef<staff>);
			this._test = default(EntityRef<test>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_staff_id", DbType="Int")]
		public System.Nullable<int> staff_id
		{
			get
			{
				return this._staff_id;
			}
			set
			{
				if ((this._staff_id != value))
				{
					if (this._staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onstaff_idChanging(value);
					this.SendPropertyChanging();
					this._staff_id = value;
					this.SendPropertyChanged("staff_id");
					this.Onstaff_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_test_id", DbType="Int")]
		public System.Nullable<int> test_id
		{
			get
			{
				return this._test_id;
			}
			set
			{
				if ((this._test_id != value))
				{
					if (this._test.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ontest_idChanging(value);
					this.SendPropertyChanging();
					this._test_id = value;
					this.SendPropertyChanged("test_id");
					this.Ontest_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_start_time", DbType="DateTime")]
		public System.Nullable<System.DateTime> start_time
		{
			get
			{
				return this._start_time;
			}
			set
			{
				if ((this._start_time != value))
				{
					this.Onstart_timeChanging(value);
					this.SendPropertyChanging();
					this._start_time = value;
					this.SendPropertyChanged("start_time");
					this.Onstart_timeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_end_time", DbType="DateTime")]
		public System.Nullable<System.DateTime> end_time
		{
			get
			{
				return this._end_time;
			}
			set
			{
				if ((this._end_time != value))
				{
					this.Onend_timeChanging(value);
					this.SendPropertyChanging();
					this._end_time = value;
					this.SendPropertyChanged("end_time");
					this.Onend_timeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_result", DbType="Float")]
		public System.Nullable<double> result
		{
			get
			{
				return this._result;
			}
			set
			{
				if ((this._result != value))
				{
					this.OnresultChanging(value);
					this.SendPropertyChanging();
					this._result = value;
					this.SendPropertyChanged("result");
					this.OnresultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_answers", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string answers
		{
			get
			{
				return this._answers;
			}
			set
			{
				if ((this._answers != value))
				{
					this.OnanswersChanging(value);
					this.SendPropertyChanging();
					this._answers = value;
					this.SendPropertyChanged("answers");
					this.OnanswersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="staff_test_result", Storage="_staff", ThisKey="staff_id", OtherKey="id", IsForeignKey=true)]
		public staff staff
		{
			get
			{
				return this._staff.Entity;
			}
			set
			{
				staff previousValue = this._staff.Entity;
				if (((previousValue != value) 
							|| (this._staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._staff.Entity = null;
						previousValue.test_results.Remove(this);
					}
					this._staff.Entity = value;
					if ((value != null))
					{
						value.test_results.Add(this);
						this._staff_id = value.id;
					}
					else
					{
						this._staff_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("staff");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="test_test_result", Storage="_test", ThisKey="test_id", OtherKey="id", IsForeignKey=true)]
		public test test
		{
			get
			{
				return this._test.Entity;
			}
			set
			{
				test previousValue = this._test.Entity;
				if (((previousValue != value) 
							|| (this._test.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._test.Entity = null;
						previousValue.test_results.Remove(this);
					}
					this._test.Entity = value;
					if ((value != null))
					{
						value.test_results.Add(this);
						this._test_id = value.id;
					}
					else
					{
						this._test_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("test");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.course_type")]
	public partial class course_type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<course> _courses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public course_type()
		{
			this._courses = new EntitySet<course>(new Action<course>(this.attach_courses), new Action<course>(this.detach_courses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="course_type_course", Storage="_courses", ThisKey="id", OtherKey="course_type_id")]
		public EntitySet<course> courses
		{
			get
			{
				return this._courses;
			}
			set
			{
				this._courses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_courses(course entity)
		{
			this.SendPropertyChanging();
			entity.course_type = this;
		}
		
		private void detach_courses(course entity)
		{
			this.SendPropertyChanging();
			entity.course_type = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.completion_status")]
	public partial class completion_status : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<staff_assigned_course> _staff_assigned_courses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public completion_status()
		{
			this._staff_assigned_courses = new EntitySet<staff_assigned_course>(new Action<staff_assigned_course>(this.attach_staff_assigned_courses), new Action<staff_assigned_course>(this.detach_staff_assigned_courses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="completion_status_staff_assigned_course", Storage="_staff_assigned_courses", ThisKey="id", OtherKey="completion_status_id")]
		public EntitySet<staff_assigned_course> staff_assigned_courses
		{
			get
			{
				return this._staff_assigned_courses;
			}
			set
			{
				this._staff_assigned_courses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_staff_assigned_courses(staff_assigned_course entity)
		{
			this.SendPropertyChanging();
			entity.completion_status = this;
		}
		
		private void detach_staff_assigned_courses(staff_assigned_course entity)
		{
			this.SendPropertyChanging();
			entity.completion_status = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lesson")]
	public partial class lesson : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private System.Nullable<int> _course_id;
		
		private System.Nullable<int> _duration_in_minutes;
		
		private EntityRef<course> _course;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Oncourse_idChanging(System.Nullable<int> value);
    partial void Oncourse_idChanged();
    partial void Onduration_in_minutesChanging(System.Nullable<int> value);
    partial void Onduration_in_minutesChanged();
    #endregion
		
		public lesson()
		{
			this._course = default(EntityRef<course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_course_id", DbType="Int")]
		public System.Nullable<int> course_id
		{
			get
			{
				return this._course_id;
			}
			set
			{
				if ((this._course_id != value))
				{
					if (this._course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncourse_idChanging(value);
					this.SendPropertyChanging();
					this._course_id = value;
					this.SendPropertyChanged("course_id");
					this.Oncourse_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_duration_in_minutes", DbType="Int")]
		public System.Nullable<int> duration_in_minutes
		{
			get
			{
				return this._duration_in_minutes;
			}
			set
			{
				if ((this._duration_in_minutes != value))
				{
					this.Onduration_in_minutesChanging(value);
					this.SendPropertyChanging();
					this._duration_in_minutes = value;
					this.SendPropertyChanged("duration_in_minutes");
					this.Onduration_in_minutesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="course_lesson", Storage="_course", ThisKey="course_id", OtherKey="id", IsForeignKey=true)]
		public course course
		{
			get
			{
				return this._course.Entity;
			}
			set
			{
				course previousValue = this._course.Entity;
				if (((previousValue != value) 
							|| (this._course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._course.Entity = null;
						previousValue.lessons.Remove(this);
					}
					this._course.Entity = value;
					if ((value != null))
					{
						value.lessons.Add(this);
						this._course_id = value.id;
					}
					else
					{
						this._course_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("course");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.staff_assigned_course")]
	public partial class staff_assigned_course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _staff_id;
		
		private System.Nullable<int> _assigned_course_id;
		
		private System.Nullable<double> _percent_completed;
		
		private System.Nullable<int> _completion_status_id;
		
		private EntityRef<assigned_course> _assigned_course;
		
		private EntityRef<completion_status> _completion_status;
		
		private EntityRef<staff> _staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onstaff_idChanging(System.Nullable<int> value);
    partial void Onstaff_idChanged();
    partial void Onassigned_course_idChanging(System.Nullable<int> value);
    partial void Onassigned_course_idChanged();
    partial void Onpercent_completedChanging(System.Nullable<double> value);
    partial void Onpercent_completedChanged();
    partial void Oncompletion_status_idChanging(System.Nullable<int> value);
    partial void Oncompletion_status_idChanged();
    #endregion
		
		public staff_assigned_course()
		{
			this._assigned_course = default(EntityRef<assigned_course>);
			this._completion_status = default(EntityRef<completion_status>);
			this._staff = default(EntityRef<staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_staff_id", DbType="Int")]
		public System.Nullable<int> staff_id
		{
			get
			{
				return this._staff_id;
			}
			set
			{
				if ((this._staff_id != value))
				{
					if (this._staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onstaff_idChanging(value);
					this.SendPropertyChanging();
					this._staff_id = value;
					this.SendPropertyChanged("staff_id");
					this.Onstaff_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_assigned_course_id", DbType="Int")]
		public System.Nullable<int> assigned_course_id
		{
			get
			{
				return this._assigned_course_id;
			}
			set
			{
				if ((this._assigned_course_id != value))
				{
					if (this._assigned_course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onassigned_course_idChanging(value);
					this.SendPropertyChanging();
					this._assigned_course_id = value;
					this.SendPropertyChanged("assigned_course_id");
					this.Onassigned_course_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_percent_completed", DbType="Float")]
		public System.Nullable<double> percent_completed
		{
			get
			{
				return this._percent_completed;
			}
			set
			{
				if ((this._percent_completed != value))
				{
					this.Onpercent_completedChanging(value);
					this.SendPropertyChanging();
					this._percent_completed = value;
					this.SendPropertyChanged("percent_completed");
					this.Onpercent_completedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_completion_status_id", DbType="Int")]
		public System.Nullable<int> completion_status_id
		{
			get
			{
				return this._completion_status_id;
			}
			set
			{
				if ((this._completion_status_id != value))
				{
					if (this._completion_status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncompletion_status_idChanging(value);
					this.SendPropertyChanging();
					this._completion_status_id = value;
					this.SendPropertyChanged("completion_status_id");
					this.Oncompletion_status_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="assigned_course_staff_assigned_course", Storage="_assigned_course", ThisKey="assigned_course_id", OtherKey="id", IsForeignKey=true)]
		public assigned_course assigned_course
		{
			get
			{
				return this._assigned_course.Entity;
			}
			set
			{
				assigned_course previousValue = this._assigned_course.Entity;
				if (((previousValue != value) 
							|| (this._assigned_course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._assigned_course.Entity = null;
						previousValue.staff_assigned_courses.Remove(this);
					}
					this._assigned_course.Entity = value;
					if ((value != null))
					{
						value.staff_assigned_courses.Add(this);
						this._assigned_course_id = value.id;
					}
					else
					{
						this._assigned_course_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("assigned_course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="completion_status_staff_assigned_course", Storage="_completion_status", ThisKey="completion_status_id", OtherKey="id", IsForeignKey=true)]
		public completion_status completion_status
		{
			get
			{
				return this._completion_status.Entity;
			}
			set
			{
				completion_status previousValue = this._completion_status.Entity;
				if (((previousValue != value) 
							|| (this._completion_status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._completion_status.Entity = null;
						previousValue.staff_assigned_courses.Remove(this);
					}
					this._completion_status.Entity = value;
					if ((value != null))
					{
						value.staff_assigned_courses.Add(this);
						this._completion_status_id = value.id;
					}
					else
					{
						this._completion_status_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("completion_status");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="staff_staff_assigned_course", Storage="_staff", ThisKey="staff_id", OtherKey="id", IsForeignKey=true)]
		public staff staff
		{
			get
			{
				return this._staff.Entity;
			}
			set
			{
				staff previousValue = this._staff.Entity;
				if (((previousValue != value) 
							|| (this._staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._staff.Entity = null;
						previousValue.staff_assigned_courses.Remove(this);
					}
					this._staff.Entity = value;
					if ((value != null))
					{
						value.staff_assigned_courses.Add(this);
						this._staff_id = value.id;
					}
					else
					{
						this._staff_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.staff")]
	public partial class staff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _first_name;
		
		private string _last_name;
		
		private System.Nullable<int> _role_id;
		
		private System.Nullable<int> _department_id;
		
		private string _email_address;
		
		private EntitySet<test_result> _test_results;
		
		private EntitySet<staff_assigned_course> _staff_assigned_courses;
		
		private EntitySet<course> _courses;
		
		private EntitySet<performance_graph> _performance_graphs;
		
		private EntityRef<role> _role;
		
		private EntityRef<department> _department;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onfirst_nameChanging(string value);
    partial void Onfirst_nameChanged();
    partial void Onlast_nameChanging(string value);
    partial void Onlast_nameChanged();
    partial void Onrole_idChanging(System.Nullable<int> value);
    partial void Onrole_idChanged();
    partial void Ondepartment_idChanging(System.Nullable<int> value);
    partial void Ondepartment_idChanged();
    partial void Onemail_addressChanging(string value);
    partial void Onemail_addressChanged();
    #endregion
		
		public staff()
		{
			this._test_results = new EntitySet<test_result>(new Action<test_result>(this.attach_test_results), new Action<test_result>(this.detach_test_results));
			this._staff_assigned_courses = new EntitySet<staff_assigned_course>(new Action<staff_assigned_course>(this.attach_staff_assigned_courses), new Action<staff_assigned_course>(this.detach_staff_assigned_courses));
			this._courses = new EntitySet<course>(new Action<course>(this.attach_courses), new Action<course>(this.detach_courses));
			this._performance_graphs = new EntitySet<performance_graph>(new Action<performance_graph>(this.attach_performance_graphs), new Action<performance_graph>(this.detach_performance_graphs));
			this._role = default(EntityRef<role>);
			this._department = default(EntityRef<department>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_first_name", DbType="VarChar(50)")]
		public string first_name
		{
			get
			{
				return this._first_name;
			}
			set
			{
				if ((this._first_name != value))
				{
					this.Onfirst_nameChanging(value);
					this.SendPropertyChanging();
					this._first_name = value;
					this.SendPropertyChanged("first_name");
					this.Onfirst_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_last_name", DbType="VarChar(50)")]
		public string last_name
		{
			get
			{
				return this._last_name;
			}
			set
			{
				if ((this._last_name != value))
				{
					this.Onlast_nameChanging(value);
					this.SendPropertyChanging();
					this._last_name = value;
					this.SendPropertyChanged("last_name");
					this.Onlast_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_role_id", DbType="Int")]
		public System.Nullable<int> role_id
		{
			get
			{
				return this._role_id;
			}
			set
			{
				if ((this._role_id != value))
				{
					if (this._role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onrole_idChanging(value);
					this.SendPropertyChanging();
					this._role_id = value;
					this.SendPropertyChanged("role_id");
					this.Onrole_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_department_id", DbType="Int")]
		public System.Nullable<int> department_id
		{
			get
			{
				return this._department_id;
			}
			set
			{
				if ((this._department_id != value))
				{
					if (this._department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondepartment_idChanging(value);
					this.SendPropertyChanging();
					this._department_id = value;
					this.SendPropertyChanged("department_id");
					this.Ondepartment_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email_address", DbType="VarChar(100)")]
		public string email_address
		{
			get
			{
				return this._email_address;
			}
			set
			{
				if ((this._email_address != value))
				{
					this.Onemail_addressChanging(value);
					this.SendPropertyChanging();
					this._email_address = value;
					this.SendPropertyChanged("email_address");
					this.Onemail_addressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="staff_test_result", Storage="_test_results", ThisKey="id", OtherKey="staff_id")]
		public EntitySet<test_result> test_results
		{
			get
			{
				return this._test_results;
			}
			set
			{
				this._test_results.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="staff_staff_assigned_course", Storage="_staff_assigned_courses", ThisKey="id", OtherKey="staff_id")]
		public EntitySet<staff_assigned_course> staff_assigned_courses
		{
			get
			{
				return this._staff_assigned_courses;
			}
			set
			{
				this._staff_assigned_courses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="staff_course", Storage="_courses", ThisKey="id", OtherKey="trainer_id")]
		public EntitySet<course> courses
		{
			get
			{
				return this._courses;
			}
			set
			{
				this._courses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="staff_performance_graph", Storage="_performance_graphs", ThisKey="id", OtherKey="staff_id")]
		public EntitySet<performance_graph> performance_graphs
		{
			get
			{
				return this._performance_graphs;
			}
			set
			{
				this._performance_graphs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="role_staff", Storage="_role", ThisKey="role_id", OtherKey="id", IsForeignKey=true)]
		public role role
		{
			get
			{
				return this._role.Entity;
			}
			set
			{
				role previousValue = this._role.Entity;
				if (((previousValue != value) 
							|| (this._role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._role.Entity = null;
						previousValue.staffs.Remove(this);
					}
					this._role.Entity = value;
					if ((value != null))
					{
						value.staffs.Add(this);
						this._role_id = value.id;
					}
					else
					{
						this._role_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="department_staff", Storage="_department", ThisKey="department_id", OtherKey="id", IsForeignKey=true)]
		public department department
		{
			get
			{
				return this._department.Entity;
			}
			set
			{
				department previousValue = this._department.Entity;
				if (((previousValue != value) 
							|| (this._department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._department.Entity = null;
						previousValue.staffs.Remove(this);
					}
					this._department.Entity = value;
					if ((value != null))
					{
						value.staffs.Add(this);
						this._department_id = value.id;
					}
					else
					{
						this._department_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_test_results(test_result entity)
		{
			this.SendPropertyChanging();
			entity.staff = this;
		}
		
		private void detach_test_results(test_result entity)
		{
			this.SendPropertyChanging();
			entity.staff = null;
		}
		
		private void attach_staff_assigned_courses(staff_assigned_course entity)
		{
			this.SendPropertyChanging();
			entity.staff = this;
		}
		
		private void detach_staff_assigned_courses(staff_assigned_course entity)
		{
			this.SendPropertyChanging();
			entity.staff = null;
		}
		
		private void attach_courses(course entity)
		{
			this.SendPropertyChanging();
			entity.staff = this;
		}
		
		private void detach_courses(course entity)
		{
			this.SendPropertyChanging();
			entity.staff = null;
		}
		
		private void attach_performance_graphs(performance_graph entity)
		{
			this.SendPropertyChanging();
			entity.staff = this;
		}
		
		private void detach_performance_graphs(performance_graph entity)
		{
			this.SendPropertyChanging();
			entity.staff = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.module")]
	public partial class module : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<course> _courses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public module()
		{
			this._courses = new EntitySet<course>(new Action<course>(this.attach_courses), new Action<course>(this.detach_courses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(100)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="module_course", Storage="_courses", ThisKey="id", OtherKey="module_id")]
		public EntitySet<course> courses
		{
			get
			{
				return this._courses;
			}
			set
			{
				this._courses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_courses(course entity)
		{
			this.SendPropertyChanging();
			entity.module = this;
		}
		
		private void detach_courses(course entity)
		{
			this.SendPropertyChanging();
			entity.module = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.course")]
	public partial class course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private System.Nullable<int> _trainer_id;
		
		private System.Nullable<int> _course_type_id;
		
		private string _description;
		
		private System.Nullable<int> _module_id;
		
		private EntitySet<assigned_course> _assigned_courses;
		
		private EntitySet<lesson> _lessons;
		
		private EntitySet<test> _tests;
		
		private EntityRef<staff> _staff;
		
		private EntityRef<course_type> _course_type;
		
		private EntityRef<module> _module;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Ontrainer_idChanging(System.Nullable<int> value);
    partial void Ontrainer_idChanged();
    partial void Oncourse_type_idChanging(System.Nullable<int> value);
    partial void Oncourse_type_idChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void Onmodule_idChanging(System.Nullable<int> value);
    partial void Onmodule_idChanged();
    #endregion
		
		public course()
		{
			this._assigned_courses = new EntitySet<assigned_course>(new Action<assigned_course>(this.attach_assigned_courses), new Action<assigned_course>(this.detach_assigned_courses));
			this._lessons = new EntitySet<lesson>(new Action<lesson>(this.attach_lessons), new Action<lesson>(this.detach_lessons));
			this._tests = new EntitySet<test>(new Action<test>(this.attach_tests), new Action<test>(this.detach_tests));
			this._staff = default(EntityRef<staff>);
			this._course_type = default(EntityRef<course_type>);
			this._module = default(EntityRef<module>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_trainer_id", DbType="Int")]
		public System.Nullable<int> trainer_id
		{
			get
			{
				return this._trainer_id;
			}
			set
			{
				if ((this._trainer_id != value))
				{
					if (this._staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ontrainer_idChanging(value);
					this.SendPropertyChanging();
					this._trainer_id = value;
					this.SendPropertyChanged("trainer_id");
					this.Ontrainer_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_course_type_id", DbType="Int")]
		public System.Nullable<int> course_type_id
		{
			get
			{
				return this._course_type_id;
			}
			set
			{
				if ((this._course_type_id != value))
				{
					if (this._course_type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncourse_type_idChanging(value);
					this.SendPropertyChanging();
					this._course_type_id = value;
					this.SendPropertyChanged("course_type_id");
					this.Oncourse_type_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_module_id", DbType="Int")]
		public System.Nullable<int> module_id
		{
			get
			{
				return this._module_id;
			}
			set
			{
				if ((this._module_id != value))
				{
					if (this._module.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onmodule_idChanging(value);
					this.SendPropertyChanging();
					this._module_id = value;
					this.SendPropertyChanged("module_id");
					this.Onmodule_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="course_assigned_course", Storage="_assigned_courses", ThisKey="id", OtherKey="course_id")]
		public EntitySet<assigned_course> assigned_courses
		{
			get
			{
				return this._assigned_courses;
			}
			set
			{
				this._assigned_courses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="course_lesson", Storage="_lessons", ThisKey="id", OtherKey="course_id")]
		public EntitySet<lesson> lessons
		{
			get
			{
				return this._lessons;
			}
			set
			{
				this._lessons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="course_test", Storage="_tests", ThisKey="id", OtherKey="course_id")]
		public EntitySet<test> tests
		{
			get
			{
				return this._tests;
			}
			set
			{
				this._tests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="staff_course", Storage="_staff", ThisKey="trainer_id", OtherKey="id", IsForeignKey=true)]
		public staff staff
		{
			get
			{
				return this._staff.Entity;
			}
			set
			{
				staff previousValue = this._staff.Entity;
				if (((previousValue != value) 
							|| (this._staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._staff.Entity = null;
						previousValue.courses.Remove(this);
					}
					this._staff.Entity = value;
					if ((value != null))
					{
						value.courses.Add(this);
						this._trainer_id = value.id;
					}
					else
					{
						this._trainer_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("staff");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="course_type_course", Storage="_course_type", ThisKey="course_type_id", OtherKey="id", IsForeignKey=true)]
		public course_type course_type
		{
			get
			{
				return this._course_type.Entity;
			}
			set
			{
				course_type previousValue = this._course_type.Entity;
				if (((previousValue != value) 
							|| (this._course_type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._course_type.Entity = null;
						previousValue.courses.Remove(this);
					}
					this._course_type.Entity = value;
					if ((value != null))
					{
						value.courses.Add(this);
						this._course_type_id = value.id;
					}
					else
					{
						this._course_type_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("course_type");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="module_course", Storage="_module", ThisKey="module_id", OtherKey="id", IsForeignKey=true)]
		public module module
		{
			get
			{
				return this._module.Entity;
			}
			set
			{
				module previousValue = this._module.Entity;
				if (((previousValue != value) 
							|| (this._module.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._module.Entity = null;
						previousValue.courses.Remove(this);
					}
					this._module.Entity = value;
					if ((value != null))
					{
						value.courses.Add(this);
						this._module_id = value.id;
					}
					else
					{
						this._module_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("module");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_assigned_courses(assigned_course entity)
		{
			this.SendPropertyChanging();
			entity.course = this;
		}
		
		private void detach_assigned_courses(assigned_course entity)
		{
			this.SendPropertyChanging();
			entity.course = null;
		}
		
		private void attach_lessons(lesson entity)
		{
			this.SendPropertyChanging();
			entity.course = this;
		}
		
		private void detach_lessons(lesson entity)
		{
			this.SendPropertyChanging();
			entity.course = null;
		}
		
		private void attach_tests(test entity)
		{
			this.SendPropertyChanging();
			entity.course = this;
		}
		
		private void detach_tests(test entity)
		{
			this.SendPropertyChanging();
			entity.course = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.test_matrix")]
	public partial class test_matrix : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _test_id;
		
		private string _question_number;
		
		private string _question_text;
		
		private string _objective_answer_one;
		
		private string _objective_answer_two;
		
		private string _objective_answer_three;
		
		private string _objective_answer_four;
		
		private string _objective_answer_five;
		
		private string _answer;
		
		private EntityRef<test> _test;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Ontest_idChanging(System.Nullable<int> value);
    partial void Ontest_idChanged();
    partial void Onquestion_numberChanging(string value);
    partial void Onquestion_numberChanged();
    partial void Onquestion_textChanging(string value);
    partial void Onquestion_textChanged();
    partial void Onobjective_answer_oneChanging(string value);
    partial void Onobjective_answer_oneChanged();
    partial void Onobjective_answer_twoChanging(string value);
    partial void Onobjective_answer_twoChanged();
    partial void Onobjective_answer_threeChanging(string value);
    partial void Onobjective_answer_threeChanged();
    partial void Onobjective_answer_fourChanging(string value);
    partial void Onobjective_answer_fourChanged();
    partial void Onobjective_answer_fiveChanging(string value);
    partial void Onobjective_answer_fiveChanged();
    partial void OnanswerChanging(string value);
    partial void OnanswerChanged();
    #endregion
		
		public test_matrix()
		{
			this._test = default(EntityRef<test>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_test_id", DbType="Int")]
		public System.Nullable<int> test_id
		{
			get
			{
				return this._test_id;
			}
			set
			{
				if ((this._test_id != value))
				{
					if (this._test.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ontest_idChanging(value);
					this.SendPropertyChanging();
					this._test_id = value;
					this.SendPropertyChanged("test_id");
					this.Ontest_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_question_number", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string question_number
		{
			get
			{
				return this._question_number;
			}
			set
			{
				if ((this._question_number != value))
				{
					this.Onquestion_numberChanging(value);
					this.SendPropertyChanging();
					this._question_number = value;
					this.SendPropertyChanged("question_number");
					this.Onquestion_numberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_question_text", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string question_text
		{
			get
			{
				return this._question_text;
			}
			set
			{
				if ((this._question_text != value))
				{
					this.Onquestion_textChanging(value);
					this.SendPropertyChanging();
					this._question_text = value;
					this.SendPropertyChanged("question_text");
					this.Onquestion_textChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_objective_answer_one", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string objective_answer_one
		{
			get
			{
				return this._objective_answer_one;
			}
			set
			{
				if ((this._objective_answer_one != value))
				{
					this.Onobjective_answer_oneChanging(value);
					this.SendPropertyChanging();
					this._objective_answer_one = value;
					this.SendPropertyChanged("objective_answer_one");
					this.Onobjective_answer_oneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_objective_answer_two", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string objective_answer_two
		{
			get
			{
				return this._objective_answer_two;
			}
			set
			{
				if ((this._objective_answer_two != value))
				{
					this.Onobjective_answer_twoChanging(value);
					this.SendPropertyChanging();
					this._objective_answer_two = value;
					this.SendPropertyChanged("objective_answer_two");
					this.Onobjective_answer_twoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_objective_answer_three", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string objective_answer_three
		{
			get
			{
				return this._objective_answer_three;
			}
			set
			{
				if ((this._objective_answer_three != value))
				{
					this.Onobjective_answer_threeChanging(value);
					this.SendPropertyChanging();
					this._objective_answer_three = value;
					this.SendPropertyChanged("objective_answer_three");
					this.Onobjective_answer_threeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_objective_answer_four", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string objective_answer_four
		{
			get
			{
				return this._objective_answer_four;
			}
			set
			{
				if ((this._objective_answer_four != value))
				{
					this.Onobjective_answer_fourChanging(value);
					this.SendPropertyChanging();
					this._objective_answer_four = value;
					this.SendPropertyChanged("objective_answer_four");
					this.Onobjective_answer_fourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_objective_answer_five", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string objective_answer_five
		{
			get
			{
				return this._objective_answer_five;
			}
			set
			{
				if ((this._objective_answer_five != value))
				{
					this.Onobjective_answer_fiveChanging(value);
					this.SendPropertyChanging();
					this._objective_answer_five = value;
					this.SendPropertyChanged("objective_answer_five");
					this.Onobjective_answer_fiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_answer", DbType="VarChar(20)")]
		public string answer
		{
			get
			{
				return this._answer;
			}
			set
			{
				if ((this._answer != value))
				{
					this.OnanswerChanging(value);
					this.SendPropertyChanging();
					this._answer = value;
					this.SendPropertyChanged("answer");
					this.OnanswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="test_test_matrix", Storage="_test", ThisKey="test_id", OtherKey="id", IsForeignKey=true)]
		public test test
		{
			get
			{
				return this._test.Entity;
			}
			set
			{
				test previousValue = this._test.Entity;
				if (((previousValue != value) 
							|| (this._test.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._test.Entity = null;
						previousValue.test_matrixes.Remove(this);
					}
					this._test.Entity = value;
					if ((value != null))
					{
						value.test_matrixes.Add(this);
						this._test_id = value.id;
					}
					else
					{
						this._test_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("test");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.test")]
	public partial class test : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _course_id;
		
		private EntitySet<test_matrix> _test_matrixes;
		
		private EntitySet<test_result> _test_results;
		
		private EntityRef<course> _course;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Oncourse_idChanging(System.Nullable<int> value);
    partial void Oncourse_idChanged();
    #endregion
		
		public test()
		{
			this._test_matrixes = new EntitySet<test_matrix>(new Action<test_matrix>(this.attach_test_matrixes), new Action<test_matrix>(this.detach_test_matrixes));
			this._test_results = new EntitySet<test_result>(new Action<test_result>(this.attach_test_results), new Action<test_result>(this.detach_test_results));
			this._course = default(EntityRef<course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_course_id", DbType="Int")]
		public System.Nullable<int> course_id
		{
			get
			{
				return this._course_id;
			}
			set
			{
				if ((this._course_id != value))
				{
					if (this._course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncourse_idChanging(value);
					this.SendPropertyChanging();
					this._course_id = value;
					this.SendPropertyChanged("course_id");
					this.Oncourse_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="test_test_matrix", Storage="_test_matrixes", ThisKey="id", OtherKey="test_id")]
		public EntitySet<test_matrix> test_matrixes
		{
			get
			{
				return this._test_matrixes;
			}
			set
			{
				this._test_matrixes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="test_test_result", Storage="_test_results", ThisKey="id", OtherKey="test_id")]
		public EntitySet<test_result> test_results
		{
			get
			{
				return this._test_results;
			}
			set
			{
				this._test_results.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="course_test", Storage="_course", ThisKey="course_id", OtherKey="id", IsForeignKey=true)]
		public course course
		{
			get
			{
				return this._course.Entity;
			}
			set
			{
				course previousValue = this._course.Entity;
				if (((previousValue != value) 
							|| (this._course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._course.Entity = null;
						previousValue.tests.Remove(this);
					}
					this._course.Entity = value;
					if ((value != null))
					{
						value.tests.Add(this);
						this._course_id = value.id;
					}
					else
					{
						this._course_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("course");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_test_matrixes(test_matrix entity)
		{
			this.SendPropertyChanging();
			entity.test = this;
		}
		
		private void detach_test_matrixes(test_matrix entity)
		{
			this.SendPropertyChanging();
			entity.test = null;
		}
		
		private void attach_test_results(test_result entity)
		{
			this.SendPropertyChanging();
			entity.test = this;
		}
		
		private void detach_test_results(test_result entity)
		{
			this.SendPropertyChanging();
			entity.test = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.performance_graph")]
	public partial class performance_graph : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _staff_id;
		
		private System.Nullable<double> _average;
		
		private string _month;
		
		private System.Nullable<int> _year;
		
		private EntityRef<staff> _staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onstaff_idChanging(System.Nullable<int> value);
    partial void Onstaff_idChanged();
    partial void OnaverageChanging(System.Nullable<double> value);
    partial void OnaverageChanged();
    partial void OnmonthChanging(string value);
    partial void OnmonthChanged();
    partial void OnyearChanging(System.Nullable<int> value);
    partial void OnyearChanged();
    #endregion
		
		public performance_graph()
		{
			this._staff = default(EntityRef<staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_staff_id", DbType="Int")]
		public System.Nullable<int> staff_id
		{
			get
			{
				return this._staff_id;
			}
			set
			{
				if ((this._staff_id != value))
				{
					if (this._staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onstaff_idChanging(value);
					this.SendPropertyChanging();
					this._staff_id = value;
					this.SendPropertyChanged("staff_id");
					this.Onstaff_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_average", DbType="Float")]
		public System.Nullable<double> average
		{
			get
			{
				return this._average;
			}
			set
			{
				if ((this._average != value))
				{
					this.OnaverageChanging(value);
					this.SendPropertyChanging();
					this._average = value;
					this.SendPropertyChanged("average");
					this.OnaverageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_month", DbType="VarChar(15)")]
		public string month
		{
			get
			{
				return this._month;
			}
			set
			{
				if ((this._month != value))
				{
					this.OnmonthChanging(value);
					this.SendPropertyChanging();
					this._month = value;
					this.SendPropertyChanged("month");
					this.OnmonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_year", DbType="Int")]
		public System.Nullable<int> year
		{
			get
			{
				return this._year;
			}
			set
			{
				if ((this._year != value))
				{
					this.OnyearChanging(value);
					this.SendPropertyChanging();
					this._year = value;
					this.SendPropertyChanged("year");
					this.OnyearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="staff_performance_graph", Storage="_staff", ThisKey="staff_id", OtherKey="id", IsForeignKey=true)]
		public staff staff
		{
			get
			{
				return this._staff.Entity;
			}
			set
			{
				staff previousValue = this._staff.Entity;
				if (((previousValue != value) 
							|| (this._staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._staff.Entity = null;
						previousValue.performance_graphs.Remove(this);
					}
					this._staff.Entity = value;
					if ((value != null))
					{
						value.performance_graphs.Add(this);
						this._staff_id = value.id;
					}
					else
					{
						this._staff_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
